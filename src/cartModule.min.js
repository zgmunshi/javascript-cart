let __cart={STORAGE_KEY:"__cart",quantityField:"quantity",changeListener:null,listen:function(t){this.changeListener=t},list:function(t){return this.parse(t)||[]},save:function(t,i){localStorage.setItem(i||this.STORAGE_KEY,JSON.stringify(t)),this.changeListener&&this.changeListener(this.list(i))},clear:function(t){localStorage.removeItem(t||this.STORAGE_KEY),this.changeListener&&this.changeListener(this.list(t))},get:function(t){return this.list().find(i=>i.id===t)},add:function(t,i){return this.isValid(t)?this.exists(t.id)?this.update(t.id,this.quantityField,this.get(t.id).quantity+(t.quantity||i||1)):this.save(this.list().concat({...t,quantity:i||1})):null},update:function(t,i,n){return this.save(this.list().map(e=>e.id===t?{...e,[i]:n}:e))},remove:function(t){return this.save(this.list().filter(i=>i.id!==t))},quantity:function(t,i){return this.exists(t)&&this.get(t).quantity+i>0?this.update(t,this.quantityField,this.get(t).quantity+i):this.remove(t)},totalPrice:function(t){return this.list().reduce((i,n)=>this.isCallback(t)?t(i,n):i+=this.subtotal(n),0)},subtotal:function(t){return this.isCalculable(t)?t.price*t.quantity:0},totalQuantity:function(){return this.list().reduce((t,i)=>t+=i.quantity,0)},exists:function(t){return!!this.get(t)},isValid:function(t){return t.id&&t.price},isCalculable:function(t){return t&&t.price&&t.quantity},isCallback:function(t){return t&&"function"==typeof t},parse:function(t){return JSON.parse(localStorage.getItem(t||this.STORAGE_KEY))},onChange:function(t){return this.isCallback(t)?this.listen(t):console.log(typeof t)}};
